"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileClient = void 0;
const client_1 = require("./client");
const enums_1 = require("./enums");
const debug_1 = __importDefault(require("debug"));
const vetch_1 = require("@vonage/vetch");
const node_fetch_1 = __importDefault(require("node-fetch"));
const fs_1 = require("fs");
const promises_1 = require("stream/promises");
const log = (0, debug_1.default)('vonage:file-client');
/**
 * A client for downloading files from Vonage.
 *
 * @extends Client
 */
class FileClient extends client_1.Client {
    authType = enums_1.AuthenticationType.JWT;
    saveFilePath = '';
    /**
     * Downloads a file from Vonage and saves it to a specified path.
     *
     * @param {string} file - The URL or ID of the file to be downloaded.
     * @param {string} path - The path where the downloaded file should be saved.
     *
     * @throws {Error} Throws an error if the file could not be downloaded or saved.
     *
     * @return {Promise<void>} Resolves when the file is successfully downloaded and saved.
     */
    async downloadFile(file, path) {
        log(`Downloading file: ${file}`);
        let fileURL;
        try {
            fileURL = new URL(file);
            log('Downloading file by URL');
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
        }
        catch (_) {
            log('Downloading file by ID');
            fileURL = new URL(`${this.config.apiHost}/v3/files/${file}`);
        }
        log(`File URL ${fileURL}`);
        const hostname = fileURL.hostname.split('.').slice(-2).join('.');
        if (!['vonage.com', 'nexmo.com'].includes(hostname)) {
            throw new Error(`The domain ${fileURL} is invalid for file download. Only vonage.com and nexmo.com are allowed.`);
        }
        const request = await this.addAuthenticationToRequest({
            url: fileURL.toString(),
            method: vetch_1.HTTPMethods.GET,
        });
        log('File download request', request);
        const response = await (0, node_fetch_1.default)(request.url, {
            method: request.method,
            headers: request.headers,
        });
        log('File download response', response);
        if (!response.ok) {
            throw new vetch_1.VetchError(`Unexpected response when downloading file: ${response.statusText}`, request);
        }
        log(`Saving to ${path}`);
        await (0, promises_1.pipeline)(response.body, (0, fs_1.createWriteStream)(path));
        log('File saved');
    }
}
exports.FileClient = FileClient;
//# sourceMappingURL=fileClient.js.map